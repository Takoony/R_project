rtvs::debug_source("script.R")
library(xts) library(reshape2) library(fBasics) library(timeDate) library(timeSeries) library(TTR) library(ggplot2) library(quantmod) library(PerformanceAnalytics)
setwd("G:/") getwd()
library(reshape2) library(fBasics) library(timeDate) library(timeSeries) library(TTR) library(ggplot2) library(quantmod) library(PerformanceAnalytics) setwd("G:/") getwd()
id_file_fold <- "DAILY/open_insterest/date" im_file_fold <- "DAILY/open_insterest/member" Sys.glob(paste(id_file_fold, "*.txt", sep = ' '))
setwd("     G:/") getwd()
Sys.glob(paste(id_file_fold, "*.txt", sep = ' '))
id_file_fold
list.files(id_file_fold)
dfiles_list<-list.files(id_file_fold)
rm(dfiles_list)
idfiles_list <- list.files(id_file_fold) imfiles_list <- list.files(id_file_fold)
idfiles_list[1]
fp_symbol <- read.table(id_file_fold+idfiles_list[1], header = T)
id_full_path <- paste(id_file_fold, idfiles_list)
head(id)
head(id_full_path)
im_full_path <- paste(im_file_fold, imfiles_list)
head(im_full_path)
id_file_fold <- "DAILY/open_insterest/date" im_file_fold <- "DAILY/open_insterest/member" idfiles_list <- list.files(id_file_fold) imfiles_list <- list.files(id_file_fold) id_file_fold <- paste(id_file_fold, "/") im_file_fold <- paste(im_file_fold, "/") id_full_path <- paste(id_file_fold, idfiles_list) im_full_path <- paste(im_file_fold, imfiles_list)
head(im_full_path)
library(xts) library(reshape2) library(fBasics) library(timeDate) library(timeSeries) library(TTR) library(ggplot2) library(quantmod) library(PerformanceAnalytics) setwd("G:/") getwd()
id_file_fold <- "DAILY/open_insterest/date" im_file_fold <- "DAILY/open_insterest/member" idfiles_list <- list.files(id_file_fold) imfiles_list <- list.files(id_file_fold) id_file_fold <- paste(id_file_fold, "/") im_file_fold <- paste(im_file_fold, "/") id_full_path <- paste(id_file_fold, idfiles_list) im_full_path <- paste(im_file_fold, imfiles_list)
head(fp_symbol)
head(id_full_path)
tmp <-id_full_path[1]
gsub("([ ])","",tmp)
gsub("([ ])", "",id_full_path) #去掉tmp中的空格
gsub("([ ])", "", im_full_path) #去掉空格
head(id)
head(id_full_path)
id_full_path<-gsub("([ ])", "", id_full_path) #去掉空格 im_full_path<-gsub("([ ])", "", im_full_path) #去掉空格
fp_symbol <- read.table(id_full_path, header = T)
length(id_full_path)
id_full_list <- list() for (i in 1:length(id_full_path))     {     id_full_list[i] = read.table(id_full_path[1], header = T)     }
for (i in 1:length(id_full_path))     {     id_full_list[i] = read.table(id_full_path[i], header = FALSE)     }
id_full_path[1]
id_full_list
for (i in 1:length(id_full_path))     {     id_full_list[[i]] = read.table(id_full_path[i], header = FALSE)     }
tmp<-read.table(id_full_path[i], header = FALSE)
i
tmp<-read.table(id_full_path[1], header = FALSE)
tmp<-read.table(id_full_path[1], header = F)
tmp<-read.table(id_full_path[1], header = F)
head(tmp)
?read.table
tmp<-read.csv(id_full_path[1], header = F)
tmp<-read.table(id_full_path[1], header = F)
head(id_full_path[1])
yy =read.table("DAILY/open_insterest/date/20160104.txt",header = F)
yy =read.table("DAILY/open_insterest/date/20160104.txt"F)
yy =read.table("DAILY/open_insterest/date/20160104.txt")
yy =read.table("DAILY/open_insterest/date/20160104.txt",header = F)
yy =read.csv("DAILY/open_insterest/date/20160104.csv",header = F)
id_file_fold <- "DAILY/open_insterest/date" im_file_fold <- "DAILY/open_insterest/member" idfiles_list <- list.files(id_file_fold) imfiles_list <- list.files(id_file_fold) id_file_fold <- paste(id_file_fold, "/") im_file_fold <- paste(im_file_fold, "/") id_full_path <- paste(id_file_fold, idfiles_list) im_full_path <- paste(im_file_fold, imfiles_list)
tmp <- id_full_path[1]
tmp
im_full_path <- paste(im_file_fold, imfiles_list) id_full_path<-gsub("([ ])", "", id_full_path) #去掉空格 im_full_path <- gsub("([ ])", "", im_full_path) #去掉空格 id_full_list <- list()
tmp<-read.table(id_full_path[1], header = F)
for (i in 1:length(id_full_path))     {     id_full_list[[i]] = read.csv(id_full_path[i], header = FALSE)     }
length(id_full)
length(id_full_list)
length(id_full_path)
id_full_list[1]
test_tmp = read.csv(id_full_path[1], encoding = utf8, header = FALSE)
test_tmp = read.csv(id_full_path[1], encoding =utf8ToInt, header = FALSE)
?read.csv
    id_full_list[[i]] = read.csv(id_full_path[i], encoding = UTF-8, header = FALSE)
    id_full_list[[i]] = read.csv(id_full_path[i], encoding = 'UTF-8', header = FALSE)
test_tmp = read.csv(id_full_path[1], encoding = 'UTF-8', header = FALSE)
test_tmp
id_full_path[1]
test_tmp = read.csv(id_full_path[1], sep = ',', encoding = 'UTF-8', header = FALSE)
test_tmp
id_full_path
id_full_path[1]
test_tmp = read.csv(id_full_path[1], sep = ',', encoding = 'UTF-8', header = FALSE)
test_tmp
test_tmp = read.csv(id_full_path[1], sep = ',', encoding = 'UTF-8-BOM', header = FALSE)
test_tmp
test_tmp = read.csv(id_full_path[1], sep = ',', encoding = 'UTF-8-BOM', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ',', encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ',', dec = ",", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1], sep = '', dec = ",", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ',', dec = "", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
?read.csv
test_tmp = read.csv(id_full_path[1], sep = ',', quote = ",", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ',', quote = "", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.table(id_full_path[1], sep = ',', quote = "", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ',', quote = "", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ',', quote = "", header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ',', encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
rm(test_tmp)
test_tmp = read.csv(id_full_path[1], sep = ',', encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ',', encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1], encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[2], encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[180], encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.table(id_full_path[1],sep = ",", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(im_full_path[1],sep = ",", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
im_full_path <- gsub("([ ])", "", im_full_path) #去掉空格
im_full_path[1]
id_file_fold <- "DAILY/open_insterest/date" im_file_fold <- "DAILY/open_insterest/member" idfiles_list <- list.files(id_file_fold) imfiles_list <- list.files(im_file_fold) id_file_fold <- paste(id_file_fold, "/") im_file_fold <- paste(im_file_fold, "/") id_full_path <- paste(id_file_fold, idfiles_list) im_full_path <- paste(im_file_fold, imfiles_list) id_full_path<-gsub("([ ])", "", id_full_path) #去掉空格 im_full_path <- gsub("([ ])", "", im_full_path) #去掉空格
test_tmp = read.csv(im_full_path[1],sep = ",", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
id_file_fold <- "DAILY/open_insterest/date" im_file_fold <- "DAILY/open_insterest/members" idfiles_list <- list.files(id_file_fold) imfiles_list <- list.files(im_file_fold) id_file_fold <- paste(id_file_fold, "/") im_file_fold <- paste(im_file_fold, "/") id_full_path <- paste(id_file_fold, idfiles_list) im_full_path <- paste(im_file_fold, imfiles_list) id_full_path<-gsub("([ ])", "", id_full_path) #去掉空格 im_full_path <- gsub("([ ])", "", im_full_path) #去掉空格
test_tmp = read.csv(im_full_path[1],sep = ",", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(im_full_path[1],sep = ",", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
im_full_path[1]
test_tmp = read.csv(id_full_path[1],sep = ",", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1],sep = ",", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1],sep = ",", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1],sep = ",", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1],sep = ",", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1],sep = ",", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1],sep = ",", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding = "UTF-8", header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ",", Encoding = "UTF-8", header = FALSE, stringsAsFactors = FALSE)
id_full_path[1]
test_tmp = read.csv(id_full_path[1], sep = ",", encoding = 'UTF-8', header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ",", encoding = "UTF-8", header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ",", Encoding = "UTF-8", header = FALSE, stringsAsFactors = FALSE)
?fileEncoding
test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding ="UTF-8", header = FALSE, stringsAsFactors = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding ="UTF-8", header = FALSE)
test_tmp = read.csv(id_full_path[2], sep = ",", fileEncoding ="UTF-8", header = FALSE)
test_tmp = read.csv(id_full_path[2], sep = ",", fileEncoding ="UTF-8", header = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding ="UTF-8", header = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding ="UTF-8-BOM", header = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding = "UTF-8", header = FALSE, check.names = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ",", encoding = "UTF-8-BOM", header = FALSE)
test_tmp = read.csv(id_full_path[1], sep = ",", encoding = "UTF-8", header = FALSE)
test_tmp = read.csv(im_full_path[1], sep = ",", encoding = "UTF-8", header = FALSE)
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE)
fileEncoding
test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding ="UTF-8-BOM", header = FALSE)
for (i in 1:length(id_full_path))     {     id_full_list[[i]] = read.csv(id_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE)     }
im_full_list <- list() for (i in 1:length(im_full_path)) {     im_full_list[[i]] = read.csv(im_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE) }
length(im_full_path)
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE)
im_full_path[1]
id_full_list[[1]]
id_full_list[1]
im_full_path[1]
test_tmp = read.csv(im_full_path[2], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE)
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,, stringsAsFactors = FALSE)
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", file=TRUE,header = FALSE,, stringsAsFactors = FALSE)
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM",file = FALSE, header = FALSE,, stringsAsFactors = FALSE)
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,, stringsAsFactors = FALSE)
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", eol="\r\n", header = FALSE,, stringsAsFactors = FALSE)
im_full_path[1]
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,, stringsAsFactors = FALSE)
test_tmp = read.csv(im_full_path[2], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,, stringsAsFactors = FALSE)
tt = id_full_list[[1]]
class(tt)
dim(tt)
tt[1,1]
tt[1,2]
class(tt[1,2])
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE, )
for (i in 1:length(id_full_path))     {     id_full_list[[i]] = read.csv(id_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE) }
tt = id_full_list[[1]]
class(tt[1,2])
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE)
im_full_path[1]
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE)
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE)
im_full_path[1]
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE)
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE)
#test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE,col.names =c("会员名","交易量","变化量","持买仓量","变化量","持卖仓量","变化量","插入时间"))
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE,col.names =c("会员名","交易量","变化量","持买仓量","变化量","持卖仓量","变化量","插入时间"))
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE,col.names =c("会员名","交易量","交易量变化量","持买仓量","持买仓量变化量","持卖仓量","持卖仓量变化量","插入时间"))
test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE,col.names =c("会员名","交易量","交易量变化量","持买仓量","持买仓量变化量","持卖仓量","持卖仓量变化量","时间"))
for (i in 1:length(im_full_path)) {     im_full_list[[i]] = read.csv(im_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, col.names =) }
for (i in 1:length(im_full_path)) {     im_full_list[[i]] = read.csv(im_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("会员名", "交易量", "交易量变化量", "持买仓量", "持买仓量变化量", "持卖仓量", "持卖仓量变化量", "时间")) }
for (i in 1:length(im_full_path)) {     im_full_list[[i]] = read.csv(im_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE) }
im_full_list[[1]]
for (i in 1:length(im_full_path)) {     im_full_list[[i]] = read.csv(im_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("会员名", "交易量", "交易量变化量", "持买仓量", "持买仓量变化量", "持卖仓量", "持卖仓量变化量", "时间")) }
class(im_full_list)
length(im_full_list)
dim(im_full_list)
dd=im_full_list[[1]]
class(dd)
dim(dd)
head(dd)
plot(dd[,4]-dd[6],type="l")
d = dd[, 4] - dd[6]
head(d)
plot(dd[,4]-dd[6])
class(d)
d = as.vector(dd[, 4] - dd[6])
plot(d)
class(d)
d = t(dd[, 4] - dd[6])
plot(d)
head(t)
d=c(1:6) plot(d)
d
d =data.frame(1:6,1,6)
plot(d)
d
d =data.frame(c(1:6),1,6)
d
d =dd[,4]-dd[,6]
dim(d)
class(d)
dim(dd)
class(d)
head(d)
plot(d)
plot(d,type="l")
i
library(xts) library(reshape2) library(fBasics) library(timeDate) library(timeSeries) library(TTR) library(ggplot2) library(quantmod) library(PerformanceAnalytics) setwd("G:/") getwd() #f代表i代表持仓，m代表会员名，d代表日期 #x代表xts格式 fpx  id_file_fold <- "DAILY/open_insterest/date" im_file_fold <- "DAILY/open_insterest/members" idfiles_list <- list.files(id_file_fold) imfiles_list <- list.files(im_file_fold) id_file_fold <- paste(id_file_fold, "/") im_file_fold <- paste(im_file_fold, "/") id_full_path <- paste(id_file_fold, idfiles_list) im_full_path <- paste(im_file_fold, imfiles_list) id_full_path<-gsub("([ ])", "", id_full_path) #去掉空格 im_full_path <- gsub("([ ])", "", im_full_path) #去掉空格
#按日期获得每天持仓数据 id_full_list <- list() #test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding ="UTF-8-BOM", header = FALSE) for (i in 1:length(id_full_path))     {     id_full_list[[i]] = read.csv(id_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE) } #按会员名获得每天持仓数据 im_full_list <- list() #test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE,col.names =c("会员名","交易量","交易量变化量","持买仓量","持买仓量变化量","持卖仓量","持卖仓量变化量","时间")) for (i in 1:length(im_full_path)) {     im_full_list[[i]] = read.csv(im_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("会员名", "交易量", "交易量变化量", "持买仓量", "持买仓量变化量", "持卖仓量", "持卖仓量变化量", "时间")) }
length(im_full_list)
t_id=id_full_list[[1]]
head(t)
head(t_id)
t_id = id_full_list[[1]][, 7] - id_full_list[[1]][, 10]
t_id
dim(t_id)
t_id = id_full_list[[1]][20, 7] - id_full_list[[1]][, 10]
t_id
t_id = sum(id_full_list[[1]][, 7] - id_full_list[[1]][, 10])
t_id
net_positions=0 for (j in 1:length(id_full_list)) {     net_positions[j] = sum(id_full_list[[j]][, 7] - id_full_list[[j]][, 10]) }
head(id_full_list[[1]])
id_file_fold <- "DAILY/open_insterest/date" im_file_fold <- "DAILY/open_insterest/members" idfiles_list <- list.files(id_file_fold) imfiles_list <- list.files(im_file_fold) id_file_fold <- paste(id_file_fold, "/") im_file_fold <- paste(im_file_fold, "/") id_full_path <- paste(id_file_fold, idfiles_list) im_full_path <- paste(im_file_fold, imfiles_list) id_full_path<-gsub("([ ])", "", id_full_path) #去掉空格 im_full_path <- gsub("([ ])", "", im_full_path) #去掉空格 #按日期获得每天持仓数据 id_full_list <- list() #test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding ="UTF-8-BOM", header = FALSE) for (i in 1:length(id_full_path))     {     id_full_list[[i]] = read.csv(id_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE) } #按会员名获得每天持仓数据 im_full_list <- list() #test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE,col.names =c("会员名","交易量","交易量变化量","持买仓量","持买仓量变化量","持卖仓量","持卖仓量变化量","时间")) for (i in 1:length(im_full_path)) {     im_full_list[[i]] = read.csv(im_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("会员名", "交易量", "交易量变化量", "持买仓量", "持买仓量变化量", "持卖仓量", "持卖仓量变化量", "时间")) }
id_full_list[[1]][1,]
#按日期获得每天持仓数据 id_full_list <- list() #test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding ="UTF-8-BOM", header = FALSE) for (i in 1:length(id_full_path))     {     id_full_list[[i]] = read.csv(id_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("排名","交易量_会员", "交易量", "交易量变化量", "持买仓量_会员","持买仓量", "持买仓量变化量", "持卖仓量","持卖仓量_会员", "持卖仓量变化量", "时间")) }
id_full_list[[1]][1,]
#按日期获得每天持仓数据 id_full_list <- list() #test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding ="UTF-8-BOM", header = FALSE) for (i in 1:length(id_full_path))     {     id_full_list[[i]] = read.csv(id_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("排名","交易量_会员", "交易量", "交易量变化量", "持买仓量_会员","持买仓量", "持买仓量变化量","持卖仓量_会员", "持卖仓量", "持卖仓量变化量", "时间")) }
#按会员名获得每天持仓数据 im_full_list <- list() #test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE,col.names =c("会员名","交易量","交易量变化量","持买仓量","持买仓量变化量","持卖仓量","持卖仓量变化量","时间")) for (i in 1:length(im_full_path)) {     im_full_list[[i]] = read.csv(im_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("会员名", "交易量", "交易量变化量", "持买仓量", "持买仓量变化量", "持卖仓量", "持卖仓量变化量", "时间")) }
tmp_c <- rbind(4, "2015-05-05");tmp_c
tmp_c <- cbind(4, "2015-05-05");tmp_c
for (j in 1:length(id_full_list)) {     net_positions[j] = cbind(sum(id_full_list[[j]][, 7] - id_full_list[[j]][, 10])) }
head(net_positions)
id_full_list[[j]][, 10]
id_full_list[[1]][1,]
net_positions=0 for (j in 1:length(id_full_list)) {     net_positions[j] = cbind(sum(id_full_list[[j]][, 7] - id_full_list[[j]][, 10]),id_full_list[[j]][,11]) }
id_full_list[[j]][,11]
net_positions=0 for (j in 1:length(id_full_list)) {     net_positions[j] = cbind(sum(id_full_list[[j]][, 7] - id_full_list[[j]][, 10]),id_full_list[[j]][1,11]) }
id_full_list[[j]][1,11]
class(id_full_list[[j]][1, 11])
head(net_positions)
id_full_list[[j]][, 7]
class(id_full_list[[j]][, 7])
tmp001 = id_full_list[[1]]
class(tmp001)
class(tmp001[,1])
class(tmp001[,2])
net_positions = 0 net_positions_date=0 for (j in 1:length(id_full_list)) {     net_positions[j] = sum(id_full_list[[j]][, 7] - id_full_list[[j]][, 10])     net_positions_date[j]=id_full_list[[j]][1, 11] }
net_positions_value = 0 net_positions_date=0 for (j in 1:length(id_full_list)) {     net_positions_value[j] = sum(id_full_list[[j]][, 7] - id_full_list[[j]][, 10])     net_positions_date[j]=id_full_list[[j]][1, 11] } net_positions = data.frame(net_value=net_positions_value, date=net_positions_date)
head(net_positions)
xnet_positions = xts(as.matrix(net_positions[,-2]), as.Date(net_positions[, 2]))
plot(xnet_positions,type="l")
which.max(xnet_positions)
xnet_positions[74]
xnet_positions[70:80]
xnet_positions[70:100]
xnet_positions[50:100]
which(xnet_positions>20000)
xnet_positions[which(xnet_positions > 20000)]
system.time({ library(xts) library(reshape2) library(fBasics) library(timeDate) library(timeSeries) library(TTR) library(ggplot2) library(quantmod) library(PerformanceAnalytics) setwd("G:/") getwd() #f代表i代表持仓，m代表会员名，d代表日期 #x代表xts格式 fpx  id_file_fold <- "DAILY/open_insterest/date" im_file_fold <- "DAILY/open_insterest/members" idfiles_list <- list.files(id_file_fold) imfiles_list <- list.files(im_file_fold) id_file_fold <- paste(id_file_fold, "/") im_file_fold <- paste(im_file_fold, "/") id_full_path <- paste(id_file_fold, idfiles_list) im_full_path <- paste(im_file_fold, imfiles_list) id_full_path<-gsub("([ ])", "", id_full_path) #去掉空格 im_full_path <- gsub("([ ])", "", im_full_path) #去掉空格 #按日期获得每天持仓数据 id_full_list <- list() #test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding ="UTF-8-BOM", header = FALSE) for (i in 1:length(id_full_path))     {     id_full_list[[i]] = read.csv(id_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("排名","交易量_会员", "交易量", "交易量变化量", "持买仓量_会员","持买仓量", "持买仓量变化量","持卖仓量_会员", "持卖仓量", "持卖仓量变化量", "时间")) } #按会员名获得每天持仓数据 im_full_list <- list() #test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE,col.names =c("会员名","交易量","交易量变化量","持买仓量","持买仓量变化量","持卖仓量","持卖仓量变化量","时间")) for (i in 1:length(im_full_path)) {     im_full_list[[i]] = read.csv(im_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("会员名", "交易量", "交易量变化量", "持买仓量", "持买仓量变化量", "持卖仓量", "持卖仓量变化量", "时间")) } #每日机构净持仓数据 t_id = sum(id_full_list[[1]][1,] - id_full_list[[1]][, 10]) t_id net_positions_value = 0 net_positions_date=0 for (j in 1:length(id_full_list)) {     net_positions_value[j] = sum(id_full_list[[j]][, 7] - id_full_list[[j]][, 10])     net_positions_date[j]=id_full_list[[j]][1, 11] } net_positions = data.frame(net_value=net_positions_value, date=net_positions_date) xnet_positions = xts(as.matrix(net_positions[, -2]), as.Date(net_positions[, 2])) xnet_positions[which(xnet_positions > 20000)] plot(xnet_positions,type="l")  })
system.time({ library(xts) library(reshape2) library(fBasics) library(timeDate) library(timeSeries) library(TTR) library(ggplot2) library(quantmod) library(PerformanceAnalytics) setwd("G:/") getwd() #f代表i代表持仓，m代表会员名，d代表日期 #x代表xts格式 fpx  id_file_fold <- "DAILY/open_insterest/date" im_file_fold <- "DAILY/open_insterest/members" idfiles_list <- list.files(id_file_fold) imfiles_list <- list.files(im_file_fold) id_file_fold <- paste(id_file_fold, "/") im_file_fold <- paste(im_file_fold, "/") id_full_path <- paste(id_file_fold, idfiles_list) im_full_path <- paste(im_file_fold, imfiles_list) id_full_path<-gsub("([ ])", "", id_full_path) #去掉空格 im_full_path <- gsub("([ ])", "", im_full_path) #去掉空格 #按日期获得每天持仓数据 id_full_list <- list() #test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding ="UTF-8-BOM", header = FALSE) for (i in 1:length(id_full_path))     {     id_full_list[[i]] = read.csv(id_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("排名","交易量_会员", "交易量", "交易量变化量", "持买仓量_会员","持买仓量", "持买仓量变化量","持卖仓量_会员", "持卖仓量", "持卖仓量变化量", "时间")) } #按会员名获得每天持仓数据 im_full_list <- list() #test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE,col.names =c("会员名","交易量","交易量变化量","持买仓量","持买仓量变化量","持卖仓量","持卖仓量变化量","时间")) for (i in 1:length(im_full_path)) {     im_full_list[[i]] = read.csv(im_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("会员名", "交易量", "交易量变化量", "持买仓量", "持买仓量变化量", "持卖仓量", "持卖仓量变化量", "时间")) } #每日机构净持仓数据 #t_id = sum(id_full_list[[1]][1,] - id_full_list[[1]][, 10]) #t_id net_positions_value = 0 net_positions_date=0 for (j in 1:length(id_full_list)) {     net_positions_value[j] = sum(id_full_list[[j]][, 7] - id_full_list[[j]][, 10])     net_positions_date[j]=id_full_list[[j]][1, 11] } net_positions = data.frame(net_value=net_positions_value, date=net_positions_date) xnet_positions = xts(as.matrix(net_positions[, -2]), as.Date(net_positions[, 2])) xnet_positions[which(xnet_positions > 20000)] plot(xnet_positions,type="l")  })
?system.time
library(xts) library(reshape2) library(fBasics) library(timeDate) library(timeSeries) library(TTR) library(ggplot2) library(quantmod) library(PerformanceAnalytics) setwd("G:/") getwd() #f代表i代表持仓，m代表会员名，d代表日期 #x代表xts格式 fpx  id_file_fold <- "DAILY/open_insterest/date" im_file_fold <- "DAILY/open_insterest/members" idfiles_list <- list.files(id_file_fold) imfiles_list <- list.files(im_file_fold) id_file_fold <- paste(id_file_fold, "/") im_file_fold <- paste(im_file_fold, "/") id_full_path <- paste(id_file_fold, idfiles_list) im_full_path <- paste(im_file_fold, imfiles_list) id_full_path<-gsub("([ ])", "", id_full_path) #去掉空格 im_full_path <- gsub("([ ])", "", im_full_path) #去掉空格 #按日期获得每天持仓数据 id_full_list <- list() #test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding ="UTF-8-BOM", header = FALSE) for (i in 1:length(id_full_path))     {     id_full_list[[i]] = read.csv(id_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("排名","交易量_会员", "交易量", "交易量变化量", "持买仓量_会员","持买仓量", "持买仓量变化量","持卖仓量_会员", "持卖仓量", "持卖仓量变化量", "时间")) } #按会员名获得每天持仓数据 im_full_list <- list() #test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE,col.names =c("会员名","交易量","交易量变化量","持买仓量","持买仓量变化量","持卖仓量","持卖仓量变化量","时间")) for (i in 1:length(im_full_path)) {     im_full_list[[i]] = read.csv(im_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("会员名", "交易量", "交易量变化量", "持买仓量", "持买仓量变化量", "持卖仓量", "持卖仓量变化量", "时间")) } #每日机构净持仓数据 #t_id = sum(id_full_list[[1]][1,] - id_full_list[[1]][, 10]) #t_id net_positions_value = 0 net_positions_date=0 for (j in 1:length(id_full_list)) {     net_positions_value[j] = sum(id_full_list[[j]][, 7] - id_full_list[[j]][, 10])     net_positions_date[j]=id_full_list[[j]][1, 11] } net_positions = data.frame(net_value=net_positions_value, date=net_positions_date) xnet_positions = xts(as.matrix(net_positions[, -2]), as.Date(net_positions[, 2])) xnet_positions[which(xnet_positions > 20000)] plot(xnet_positions,type="l")  })
xnet_positions[which(xnet_positions <- 20000)] plot(xnet_positions,type="l")
library(xts) library(reshape2) library(fBasics) library(timeDate) library(timeSeries) library(TTR) library(ggplot2) library(quantmod) library(PerformanceAnalytics)
setwd("G:/") getwd()
id_file_fold <- "DAILY/open_insterest/date" im_file_fold <- "DAILY/open_insterest/members" idfiles_list <- list.files(id_file_fold) imfiles_list <- list.files(im_file_fold) id_file_fold <- paste(id_file_fold, "/") im_file_fold <- paste(im_file_fold, "/") id_full_path <- paste(id_file_fold, idfiles_list) im_full_path <- paste(im_file_fold, imfiles_list) id_full_path<-gsub("([ ])", "", id_full_path) #去掉空格 im_full_path <- gsub("([ ])", "", im_full_path) #去掉空格
#按日期获得每天持仓数据 id_full_list <- list() #test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding ="UTF-8-BOM", header = FALSE) for (i in 1:length(id_full_path))     {     id_full_list[[i]] = read.csv(id_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("排名","交易量_会员", "交易量", "交易量变化量", "持买仓量_会员","持买仓量", "持买仓量变化量","持卖仓量_会员", "持卖仓量", "持卖仓量变化量", "时间")) }
im_full_list <- list() #test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE,col.names =c("会员名","交易量","交易量变化量","持买仓量","持买仓量变化量","持卖仓量","持卖仓量变化量","时间")) for (i in 1:length(im_full_path)) {     im_full_list[[i]] = read.csv(im_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("会员名", "交易量", "交易量变化量", "持买仓量", "持买仓量变化量", "持卖仓量", "持卖仓量变化量", "时间")) }
net_positions_value = 0 net_positions_date=0 for (j in 1:length(id_full_list)) {     net_positions_value[j] = sum(id_full_list[[j]][, 7] - id_full_list[[j]][, 10])     net_positions_date[j]=id_full_list[[j]][1, 11] }
net_positions = data.frame(net_value=net_positions_value, date=net_positions_date) xnet_positions = xts(as.matrix(net_positions[, -2]), as.Date(net_positions[, 2])) xnet_positions[which(xnet_positions <- 20000)]
net_positions = data.frame(net_value=net_positions_value, date=net_positions_date) xnet_positions = xts(as.matrix(net_positions[, -2]), as.Date(net_positions[, 2])) xnet_positions[which(xnet_positions < -20000)] plot(xnet_positions,type="l")
class(xnet_positions)
dnet_positions = data.frame(xnet_positions)
head(dnet)
head(dnet_positions)
ggplot(data = dnet_positions) + geom_point()
index(dnet_positions)
dnet_positions = data.frame(index(xnet_positions), xnet_positions[,1])
head(dnet)
head(dnet_positions)
dnet_positions = data.frame(time=index(xnet_positions), value=xnet_positions[,1])
ggplot(data = dnet_positions, aes(x = time, y = value)) + geom_point()
head(dnet_positions)> head(dnet_positions)
head(dnet_positions)
ggplot(data = dnet_positions, aes(x = time, y = value)) + geom_line()
ggplot(data = dnet_positions, aes(x = time, y = value))  #+ geom_line() geom_histogram()
ggplot(data = dnet_positions, aes(x = value)) #+ geom_line() geom_histogram()
ggplot(data = dnet_positions, aes(x = value)) #+ geom_line() +geom_histogram()
ggplot(data = dnet_positions, aes(x = time,y=value)) + geom_line()
ggplot(data = dnet_positions, aes(x = time,y=value)) +geom_line()
ggplot(data = dnet_positions, aes(x = time,y=value))
geom_line()
ggplot(data = dnet_positions, aes(x = time,y=value)) + geom_line()
library(xts) library(reshape2) library(fBasics) library(timeDate) library(timeSeries) library(TTR) library(ggplot2) library(quantmod) library(PerformanceAnalytics)
setwd("G:/") getwd() #f代表i代表持仓，m代表会员名，d代表日期 #x代表xts格式 fpx 
id_file_fold <- "DAILY/open_insterest/date" im_file_fold <- "DAILY/open_insterest/members" idfiles_list <- list.files(id_file_fold) imfiles_list <- list.files(im_file_fold) id_file_fold <- paste(id_file_fold, "/") im_file_fold <- paste(im_file_fold, "/") id_full_path <- paste(id_file_fold, idfiles_list) im_full_path <- paste(im_file_fold, imfiles_list) id_full_path<-gsub("([ ])", "", id_full_path) #去掉空格 im_full_path <- gsub("([ ])", "", im_full_path) #去掉空格
#按日期获得每天持仓数据 id_full_list <- list() #test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding ="UTF-8-BOM", header = FALSE) for (i in 1:length(id_full_path))     {     id_full_list[[i]] = read.csv(id_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("排名","交易量_会员", "交易量", "交易量变化量", "持买仓量_会员","持买仓量", "持买仓量变化量","持卖仓量_会员", "持卖仓量", "持卖仓量变化量", "时间")) }
#按会员名获得每天持仓数据 im_full_list <- list() #test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE,col.names =c("会员名","交易量","交易量变化量","持买仓量","持买仓量变化量","持卖仓量","持卖仓量变化量","时间")) for (i in 1:length(im_full_path)) {     im_full_list[[i]] = read.csv(im_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("会员名", "交易量", "交易量变化量", "持买仓量", "持买仓量变化量", "持卖仓量", "持卖仓量变化量", "时间")) } #每日机构净持仓数据 #t_id = sum(id_full_list[[1]][1,] - id_full_list[[1]][, 10]) #t_id net_positions_value = 0 net_positions_date=0 for (j in 1:length(id_full_list)) {     net_positions_value[j] = sum(id_full_list[[j]][, 7] - id_full_list[[j]][, 10])     net_positions_date[j]=id_full_list[[j]][1, 11] } net_positions = data.frame(net_value=net_positions_value, date=net_positions_date) xnet_positions = xts(as.matrix(net_positions[, -2]), as.Date(net_positions[, 2])) xnet_positions[which(xnet_positions < -20000)] dnet_positions = data.frame(time=index(xnet_positions), value=xnet_positions[,1]) ggplot(data = dnet_positions, aes(x = time,y=value)) + geom_line() #+geom_histogram() plot(xnet_positions, type = "l")
#f代表i代表持仓，m代表会员名，d代表日期 #x代表xts格式 fpx  id_file_fold <- "DAILY/open_insterest/date" im_file_fold <- "DAILY/open_insterest/members" idfiles_list <- list.files(id_file_fold) imfiles_list <- list.files(im_file_fold) id_file_fold <- paste(id_file_fold, "/") im_file_fold <- paste(im_file_fold, "/") id_full_path <- paste(id_file_fold, idfiles_list) im_full_path <- paste(im_file_fold, imfiles_list) id_full_path<-gsub("([ ])", "", id_full_path) #去掉空格 im_full_path <- gsub("([ ])", "", im_full_path) #去掉空格 #按日期获得每天持仓数据 id_full_list <- list() #test_tmp = read.csv(id_full_path[1], sep = ",", fileEncoding ="UTF-8-BOM", header = FALSE) for (i in 1:length(id_full_path))     {     id_full_list[[i]] = read.csv(id_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("排名","交易量_会员", "交易量", "交易量变化量", "持买仓量_会员","持买仓量", "持买仓量变化量","持卖仓量_会员", "持卖仓量", "持卖仓量变化量", "时间")) } #按会员名获得每天持仓数据 im_full_list <- list() #test_tmp = read.csv(im_full_path[1], sep = ",", fileEncoding = "UTF-8-BOM", header = FALSE,stringsAsFactors = FALSE,col.names =c("会员名","交易量","交易量变化量","持买仓量","持买仓量变化量","持卖仓量","持卖仓量变化量","时间")) for (i in 1:length(im_full_path)) {     im_full_list[[i]] = read.csv(im_full_path[i], sep = ',', fileEncoding = "UTF-8-BOM", header = FALSE, stringsAsFactors = FALSE, col.names = c("会员名", "交易量", "交易量变化量", "持买仓量", "持买仓量变化量", "持卖仓量", "持卖仓量变化量", "时间")) } #每日机构净持仓数据 #t_id = sum(id_full_list[[1]][1,] - id_full_list[[1]][, 10]) #t_id net_positions_value = 0 net_positions_date=0 for (j in 1:length(id_full_list)) {     net_positions_value[j] = sum(id_full_list[[j]][, 7] - id_full_list[[j]][, 10])     net_positions_date[j]=id_full_list[[j]][1, 11] } net_positions = data.frame(net_value=net_positions_value, date=net_positions_date) xnet_positions = xts(as.matrix(net_positions[, -2]), as.Date(net_positions[, 2])) xnet_positions[which(xnet_positions < -20000)] dnet_positions = data.frame(time=index(xnet_positions), value=xnet_positions[,1]) ggplot(data = dnet_positions, aes(x = time,y=value)) + geom_line() #+geom_histogram() plot(xnet_positions, type = "l")
head(id)
head(id_full_list\)
head(id_full_list)
length(im_full_list)
im_full_list[[77]]
id_full_list[[77]]
length(id_full_list)
id_full_list[[185]]
library(xts) library(reshape2) library(fBasics) library(timeDate) library(timeSeries) library(TTR) library(ggplot2) library(quantmod) library(PerformanceAnalytics) setwd("G:/") getwd() #下划线前缀有x代表xts格式 file <- "DAILY/PRICE/RU0_20050104_20160930.txt" symbol <- read.table(fp_file, header = T) x_symbol = xts(as.matrix(fp_symbol[, -1]), as.Date(fp_symbol[, 1]))
library(PerformanceAnalytics) setwd("G:/") getwd()
file <- "DAILY/PRICE/RU0_20050104_20160930.txt"
file <- "DAILY/PRICE/RU0_20050104_20160930.txt" symbol <- read.table(file, header = T) x_symbol = xts(as.matrix(symbol[, -1]), as.Date(symbol[, 1]))
xmon_symbol <- to.monthly(x_symbol)
x_symbol_monthly <- to.monthly(x_symbol)
plot(x_symbol_monthly)
hist(x_symbol_monthly)
head(x_symbol_monthly)
hist(x_symbol_monthly[,4])
data <- data.frame(x_symbol_monthly)
head(data)
p <- ggplot(data, aes(x = index(data), y = x_symbol.Close)) p <- p + geom_histogram(fill = "navy") p <- p + geom_density(colour = "green") p
p <- ggplot(data, aes(x = index(data), y = ..density.)) p <- p + geom_histogram(fill = "navy") p <- p + geom_density(colour = "green") p
p <- ggplot(data, aes(x = index(data), y = ..density..)) p <- p + geom_histogram(fill = "navy") p <- p + geom_density(colour = "green") p
hist(x_symbol_monthly[, 4])
head(x_symbol_monthly)
x_symbol_monthly_close <- x_symbol_monthly[,4]
plot(x_symbol_monthly_close) hist(x_symbol_monthly_close[, 4])
hist(x_symbol_monthly_close)
head(x_symbol_monthly_close)
x_symbol_monthly["一月"]
dim(x_symbol_monthly)
dim(x_symbol_monthly)[1]
12/16
12%16
12%%16
12%%19
19%%12
1%%12
for (i in dim(x_symbol_monthly)[1]) {     d[i]=i%%12 }
d=0 for (i in dim(x_symbol_monthly)[1]) {     d[i]=i%%12 }
d=0 for (i in 1:dim(x_symbol_monthly)[1]) {     d[i]=i%%12 }
for (i in 1:dim(x_symbol_monthly)[1]) {     d[i] = i %% 12     if(d[i]==0) d[i]=12 }
test <- cbind(x_symbol_monthly,d)
head(test)
tail(test)
group_month= 0 for (i in 1:dim(x_symbol_monthly)[1]) {     group_month[i] = i %% 12     if (group_month[i] == 0) group_month[i] = 12 }
tt <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] -1
head(tt)
monthly_return <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] -1
monthly_return <- cbind(monthly_return, group_month)
head(monthly_return)
row.names(monthly_return)<-c(ret,group_id)
row.names(monthly_return)<-c('ret','group_id')
head(monthly_return)
?row.names
col.names(monthly_return)<-c('ret','group_id')
colnames(monthly_return) <- c('ret', 'group_id')
head(monthly_return)
install.packages("plyr")
library(plyr)
install.packages(plyr)
install.packages('plyr')
library(plyr)
library(plyr)
install.packages('plyr')
tapply(monthly_return[, 2], monthly_return[,1],mean)
stat_result<-tapply(monthly_return[, 2], monthly_return[,1],mean)
head(stat_result)
stat_result <- tapply(monthly_return[, 1], monthly_return[, 2], mean)
dim(stat_result)
stat_result
stat_ret_mean <- tapply(monthly_return[, 1], monthly_return[, 2], mean)
group(monthly_return)
table(monthly_return)
?table
tt=monthly_return[which(monthly_return[, 1] > 0)]
head(tt)
tt=tapply(monthly_return[, 1], monthly_return[, 2])
head(tt)
length(tt)
table(monthly_return[, 2])
f_stat <- monthly_return[which(monthly_return[,1]>0)]
head(f_stat)
table(f_stat)
table(f_stat[,2])
table(monthly_return[, 2])
stat_ret_mean
f_stat
cnt_month<-table(monthly_return[, 2])
cnt_month_positive<-table(f_stat[, 2])
cnt_month
cnt_month_positive
cnt_month_positive / cnt_month
cnt_month - cnt_month_positive
7/12
stat_ret_mean
write.csv(stat_ret_mean)
write.csv(stat_ret_mean,"stat.txt")
write.csv(stat_ret_mean,"stat.csv")
month_chr<-c('01','02','03','04','05','06','07','08','09','10','11','12')
class(stat_ret_mean)
stat_ret_mean[,1]
dim(stat_ret_mean)
month_chr <- c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12') mean_up_range <- stat_ret_mean cnt_up <- cnt_month_positive cnt_down <- cnt_month - cnt_month_positive probability_up <- cnt_month_positive / cnt_month final_monthly_return <- data.frame("月份" <- month_chr, "上涨次数" <- cnt_up,      "下跌次数" <- cnt_down, "上涨概率" <- probability_up)
head(final_monthly_return)
mean_up_range
mean_up_range <- as.vector(stat_ret_mean)
mean_up_range
month_chr <- c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12') mean_up_range <- as.vector(stat_ret_mean) cnt_up <- as.vector(cnt_month_positive) cnt_down <- as.vector(cnt_month - cnt_month_positive) probability_up <- as.vector(cnt_month_positive / cnt_month) final_monthly_return <- data.frame("月份" <- month_chr, "上涨次数" <- cnt_up,      "下跌次数" <- cnt_down, "上涨概率" <- probability_up)
head(final_monthly_return)
final_monthly_return <- data.frame("月份" =month_chr, "平均涨幅" = mean_up_range, "上涨次数" = cnt_up,     "下跌次数" = cnt_down, "上涨概率" = probability_up)
head(final_monthly_return)
final_monthly_return
write.csv(final_monthly_return, "ru_monthly_return.csv")
file <- "DAILY/PRICE/M0_20050104_20160930.txt" symbol <- read.table(file, header = T) x_symbol <- xts(as.matrix(symbol[, -1]), as.Date(symbol[, 1])) x_symbol_monthly <- to.monthly(x_symbol) group_month= 0 for (i in 1:dim(x_symbol_monthly)[1]) {     group_month[i] = i %% 12     if (group_month[i] == 0) group_month[i] = 12 } monthly_return <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] - 1 monthly_return <- cbind(monthly_return, group_month) colnames(monthly_return) <- c('ret', 'group_id') stat_ret_mean <- tapply(monthly_return[, 1], monthly_return[, 2], mean) c <- monthly_return[which(monthly_return[, 1] > 0)] cnt_month<-table(monthly_return[, 2]) cnt_month_positive <- table(f_stat[, 2]) month_chr <- c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12') mean_up_range <- as.vector(stat_ret_mean) cnt_up <- as.vector(cnt_month_positive) cnt_down <- as.vector(cnt_month - cnt_month_positive) probability_up <- as.vector(cnt_month_positive / cnt_month) final_monthly_return <- data.frame("月份" =month_chr, "平均涨幅" = mean_up_range, "上涨次数" = cnt_up,     "下跌次数" = cnt_down, "上涨概率" = probability_up) write.csv(final_monthly_return, "ru_monthly_return.csv")
final_monthly_return
file <- "DAILY/PRICE/M0_20050104_20160930.txt" symbol <- read.table(file, header = T) x_symbol <- xts(as.matrix(symbol[, -1]), as.Date(symbol[, 1])) x_symbol_monthly <- to.monthly(x_symbol) group_month= 0 for (i in 1:dim(x_symbol_monthly)[1]) {     group_month[i] = i %% 12     if (group_month[i] == 0) group_month[i] = 12 } monthly_return <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] - 1 monthly_return <- cbind(monthly_return, group_month) colnames(monthly_return) <- c('ret', 'group_id') stat_ret_mean <- tapply(monthly_return[, 1], monthly_return[, 2], mean) c <- monthly_return[which(monthly_return[, 1] > 0)] cnt_month<-table(monthly_return[, 2]) cnt_month_positive <- table(f_stat[, 2]) month_chr <- c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12') mean_up_range <- as.vector(stat_ret_mean) cnt_up <- as.vector(cnt_month_positive) cnt_down <- as.vector(cnt_month - cnt_month_positive) probability_up <- as.vector(cnt_month_positive / cnt_month) final_monthly_return <- data.frame("月份" =month_chr, "平均涨幅" = mean_up_range, "上涨次数" = cnt_up,     "下跌次数" = cnt_down, "上涨概率" = probability_up) write.csv(final_monthly_return, "m_monthly_return.csv")
file <- "DAILY/PRICE/RU0_20050104_20160930.txt" #file <- "DAILY/PRICE/M0_20050104_20160930.txt" symbol <- read.table(file, header = T) x_symbol <- xts(as.matrix(symbol[, -1]), as.Date(symbol[, 1])) x_symbol_monthly <- to.monthly(x_symbol) group_month= 0 for (i in 1:dim(x_symbol_monthly)[1]) {     group_month[i] = i %% 12     if (group_month[i] == 0) group_month[i] = 12 } monthly_return <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] - 1 monthly_return <- cbind(monthly_return, group_month) colnames(monthly_return) <- c('ret', 'group_id') stat_ret_mean <- tapply(monthly_return[, 1], monthly_return[, 2], mean) c <- monthly_return[which(monthly_return[, 1] > 0)] cnt_month<-table(monthly_return[, 2]) cnt_month_positive <- table(f_stat[, 2]) month_chr <- c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12') mean_up_range <- as.vector(stat_ret_mean) cnt_up <- as.vector(cnt_month_positive) cnt_down <- as.vector(cnt_month - cnt_month_positive) probability_up <- as.vector(cnt_month_positive / cnt_month) final_monthly_return <- data.frame("月份" =month_chr, "平均涨幅" = mean_up_range, "上涨次数" = cnt_up,     "下跌次数" = cnt_down, "上涨概率" = probability_up) write.csv(final_monthly_return, "ru_monthly_return.csv")
head(x_symbol)
file <- "DAILY/PRICE/M0_20050104_20160930.txt"
symbol <- read.table(file, header = T)
x_symbol <- xts(as.matrix(symbol[, -1]), as.Date(symbol[, 1]))
head(x_symbol)
x_symbol_monthly <- to.monthly(x_symbol) group_month= 0 for (i in 1:dim(x_symbol_monthly)[1]) {     group_month[i] = i %% 12     if (group_month[i] == 0) group_month[i] = 12 }
monthly_return <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] - 1
monthly_return <- cbind(monthly_return, group_month) colnames(monthly_return) <- c('ret', 'group_id') stat_ret_mean <- tapply(monthly_return[, 1], monthly_return[, 2], mean)
file <- "DAILY/PRICE/SR0_20060112_20160930.txt"
file <- "DAILY/PRICE/SR0_20060112_20160930.txt" symbol <- read.table(file, header = T) x_symbol <- xts(as.matrix(symbol[, -1]), as.Date(symbol[, 1])) x_symbol_monthly <- to.monthly(x_symbol) group_month= 0 for (i in 1:dim(x_symbol_monthly)[1]) {     group_month[i] = i %% 12     if (group_month[i] == 0) group_month[i] = 12 } monthly_return <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] - 1 monthly_return <- cbind(monthly_return, group_month) colnames(monthly_return) <- c('ret', 'group_id') stat_ret_mean <- tapply(monthly_return[, 1], monthly_return[, 2], mean) c <- monthly_return[which(monthly_return[, 1] > 0)] cnt_month<-table(monthly_return[, 2]) cnt_month_positive <- table(f_stat[, 2]) month_chr <- c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12') mean_up_range <- as.vector(stat_ret_mean) cnt_up <- as.vector(cnt_month_positive) cnt_down <- as.vector(cnt_month - cnt_month_positive) probability_up <- as.vector(cnt_month_positive / cnt_month) final_monthly_return <- data.frame("月份" =month_chr, "平均涨幅" = mean_up_range, "上涨次数" = cnt_up,     "下跌次数" = cnt_down, "上涨概率" = probability_up) write.csv(final_monthly_return, "sr_monthly_return.csv")
ile <- "DAILY/PRICE/SR0_20060112_20160930.txt" symbol <- read.table(file, header = T) x_symbol <- xts(as.matrix(symbol[, -1]), as.Date(symbol[, 1])) x_symbol_monthly <- to.monthly(x_symbol)
x_symbol_monthly
group_month= 0 for (i in 1:dim(x_symbol_monthly)[1]) {     group_month[i] = i %% 12     if (group_month[i] == 0) group_month[i] = 12 }
monthly_return <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] - 1 monthly_return <- cbind(monthly_return, group_month)
colnames(monthly_return) <- c('ret', 'group_id')
stat_ret_mean <- tapply(monthly_return[, 1], monthly_return[, 2], mean)
stat_ret_mean
monthly_return
monthly_return <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] - 1 monthly_return <- cbind(monthly_return, group_month) colnames(monthly_return) <- c('ret', 'group_id') stat_ret_mean <- tapply(monthly_return[, 1], monthly_return[, 2], mean) c <- monthly_return[which(monthly_return[, 1] > 0)] cnt_month<-table(monthly_return[, 2]) cnt_month_positive <- table(f_stat[, 2]) month_chr <- c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12') mean_up_range <- as.vector(stat_ret_mean) cnt_up <- as.vector(cnt_month_positive) cnt_down <- as.vector(cnt_month - cnt_month_positive) probability_up <- as.vector(cnt_month_positive / cnt_month) final_monthly_return <- data.frame("月份" =month_chr, "平均涨幅" = mean_up_range, "上涨次数" = cnt_up,     "下跌次数" = cnt_down, "上涨概率" = probability_up) write.csv(final_monthly_return, "sr_monthly_return.csv")
cnt_month<-table(monthly_return[, 2])
cnt_month
f_stat <- monthly_return[which(monthly_return[, 1] > 0)] cnt_month<-table(monthly_return[, 2]) cnt_month_positive <- table(f_stat[, 2])
monthly_return <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] - 1 monthly_return <- cbind(monthly_return, group_month) colnames(monthly_return) <- c('ret', 'group_id') stat_ret_mean <- tapply(monthly_return[, 1], monthly_return[, 2], mean) f_stat <- monthly_return[which(monthly_return[, 1] > 0)] cnt_month<-table(monthly_return[, 2]) cnt_month_positive <- table(f_stat[, 2]) month_chr <- c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12') mean_up_range <- as.vector(stat_ret_mean) cnt_up <- as.vector(cnt_month_positive) cnt_down <- as.vector(cnt_month - cnt_month_positive) probability_up <- as.vector(cnt_month_positive / cnt_month)
probability_up
cnt_month_positive
write.csv(final_monthly_return, "sr_monthly_return.csv")
file <- "DAILY/PRICE/m0_20060112_20160930.txt" symbol <- read.table(file, header = T) x_symbol <- xts(as.matrix(symbol[, -1]), as.Date(symbol[, 1])) x_symbol_monthly <- to.monthly(x_symbol) group_month= 0 for (i in 1:dim(x_symbol_monthly)[1]) {     group_month[i] = i %% 12     if (group_month[i] == 0) group_month[i] = 12 } monthly_return <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] - 1 monthly_return <- cbind(monthly_return, group_month) colnames(monthly_return) <- c('ret', 'group_id') stat_ret_mean <- tapply(monthly_return[, 1], monthly_return[, 2], mean) f_stat <- monthly_return[which(monthly_return[, 1] > 0)] cnt_month<-table(monthly_return[, 2]) cnt_month_positive <- table(f_stat[, 2]) month_chr <- c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12') mean_up_range <- as.vector(stat_ret_mean) cnt_up <- as.vector(cnt_month_positive) cnt_down <- as.vector(cnt_month - cnt_month_positive) probability_up <- as.vector(cnt_month_positive / cnt_month) final_monthly_return <- data.frame("月份" =month_chr, "平均涨幅" = mean_up_range, "上涨次数" = cnt_up,     "下跌次数" = cnt_down, "上涨概率" = probability_up) write.csv(final_monthly_return, "m_monthly_return.csv")
file <- "DAILY/PRICE/M0_20050104_20160930.txt" #file <- "DAILY/PRICE/SR0_20060112_20160930.txt" symbol <- read.table(file, header = T) x_symbol <- xts(as.matrix(symbol[, -1]), as.Date(symbol[, 1])) x_symbol_monthly <- to.monthly(x_symbol) group_month= 0 for (i in 1:dim(x_symbol_monthly)[1]) {     group_month[i] = i %% 12     if (group_month[i] == 0) group_month[i] = 12 } monthly_return <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] - 1 monthly_return <- cbind(monthly_return, group_month) colnames(monthly_return) <- c('ret', 'group_id') stat_ret_mean <- tapply(monthly_return[, 1], monthly_return[, 2], mean) f_stat <- monthly_return[which(monthly_return[, 1] > 0)] cnt_month<-table(monthly_return[, 2]) cnt_month_positive <- table(f_stat[, 2]) month_chr <- c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12') mean_up_range <- as.vector(stat_ret_mean) cnt_up <- as.vector(cnt_month_positive) cnt_down <- as.vector(cnt_month - cnt_month_positive) probability_up <- as.vector(cnt_month_positive / cnt_month) final_monthly_return <- data.frame("月份" =month_chr, "平均涨幅" = mean_up_range, "上涨次数" = cnt_up,     "下跌次数" = cnt_down, "上涨概率" = probability_up) write.csv(final_monthly_return, "m_monthly_return.csv")
ile <- "DAILY/PRICE/SR0_20060112_20160930.txt" symbol <- read.table(file, header = T) x_symbol <- xts(as.matrix(symbol[, -1]), as.Date(symbol[, 1])) x_symbol_monthly <- to.monthly(x_symbol) group_month= 0 for (i in 1:dim(x_symbol_monthly)[1]) {     group_month[i] = i %% 12     if (group_month[i] == 0) group_month[i] = 12 } monthly_return <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] - 1 monthly_return <- cbind(monthly_return, group_month) colnames(monthly_return) <- c('ret', 'group_id') stat_ret_mean <- tapply(monthly_return[, 1], monthly_return[, 2], mean) f_stat <- monthly_return[which(monthly_return[, 1] > 0)] cnt_month<-table(monthly_return[, 2]) cnt_month_positive <- table(f_stat[, 2]) month_chr <- c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12') mean_up_range <- as.vector(stat_ret_mean) cnt_up <- as.vector(cnt_month_positive) cnt_down <- as.vector(cnt_month - cnt_month_positive) probability_up <- as.vector(cnt_month_positive / cnt_month) final_monthly_return <- data.frame("月份" =month_chr, "平均涨幅" = mean_up_range, "上涨次数" = cnt_up,     "下跌次数" = cnt_down, "上涨概率" = probability_up)
final_monthly_return
cnt_month_positive
monthly_return <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] - 1 monthly_return <- cbind(monthly_return, group_month) colnames(monthly_return) <- c('ret', 'group_id') stat_ret_mean <- tapply(monthly_return[, 1], monthly_return[, 2], mean)
f_stat <- monthly_return[which(monthly_return[, 1] > 0)]
f_stat
x_symbol_monthly
monthly_return
head(x_symbol_monthly)
file <- "DAILY/PRICE/SR0_20060112_20160930.txt" symbol <- read.table(file, header = T) x_symbol <- xts(as.matrix(symbol[, -1]), as.Date(symbol[, 1])) x_symbol_monthly <- to.monthly(x_symbol) group_month= 0 for (i in 1:dim(x_symbol_monthly)[1]) {     group_month[i] = i %% 12     if (group_month[i] == 0) group_month[i] = 12 }
monthly_return <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] - 1 monthly_return <- cbind(monthly_return, group_month) colnames(monthly_return) <- c('ret', 'group_id') stat_ret_mean <- tapply(monthly_return[, 1], monthly_return[, 2], mean) f_stat <- monthly_return[which(monthly_return[, 1] > 0)] cnt_month<-table(monthly_return[, 2]) cnt_month_positive <- table(f_stat[, 2]) month_chr <- c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12') mean_up_range <- as.vector(stat_ret_mean) cnt_up <- as.vector(cnt_month_positive) cnt_down <- as.vector(cnt_month - cnt_month_positive) probability_up <- as.vector(cnt_month_positive / cnt_month) final_monthly_return <- data.frame("月份" =month_chr, "平均涨幅" = mean_up_range, "上涨次数" = cnt_up,     "下跌次数" = cnt_down, "上涨概率" = probability_up) write.csv(final_monthly_return, "m_monthly_return.csv")
write.csv(final_monthly_return, "sr_monthly_return.csv")
head(monthly_return)
head(x_symbol_monthly)
monthly_return
monthly_return <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] - 1 monthly_return <- cbind(monthly_return, group_month)
head(monthly_return)
colnames(monthly_return) <- c('ret', 'group_id') stat_ret_mean <- tapply(monthly_return[, 1], monthly_return[, 2], mean)
stat_ret_mean
f_stat <- monthly_return[which(monthly_return[, 1] > 0)] cnt_month<-table(monthly_return[, 2]) cnt_month_positive <- table(f_stat[, 2]) month_chr <- c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12') mean_up_range <- as.vector(stat_ret_mean) cnt_up <- as.vector(cnt_month_positive) cnt_down <- as.vector(cnt_month - cnt_month_positive) probability_up <- as.vector(cnt_month_positive / cnt_month) final_monthly_return <- data.frame("月份" =month_chr, "平均涨幅" = mean_up_range, "上涨次数" = cnt_up,     "下跌次数" = cnt_down, "上涨概率" = probability_up)
probability_up
write.csv(final_monthly_return, "sr_monthly_return.csv")
file <- "DAILY/PRICE/M0_20050104_20160930.txt" #file <- "DAILY/PRICE/SR0_20060112_20160930.txt" symbol <- read.table(file, header = T) x_symbol <- xts(as.matrix(symbol[, -1]), as.Date(symbol[, 1])) x_symbol_monthly <- to.monthly(x_symbol) group_month= 0 for (i in 1:dim(x_symbol_monthly)[1]) {     group_month[i] = i %% 12     if (group_month[i] == 0) group_month[i] = 12 } monthly_return <- x_symbol_monthly[, 4] / x_symbol_monthly[, 1] - 1 monthly_return <- cbind(monthly_return, group_month) colnames(monthly_return) <- c('ret', 'group_id') stat_ret_mean <- tapply(monthly_return[, 1], monthly_return[, 2], mean) f_stat <- monthly_return[which(monthly_return[, 1] > 0)] cnt_month<-table(monthly_return[, 2]) cnt_month_positive <- table(f_stat[, 2]) month_chr <- c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12') mean_up_range <- as.vector(stat_ret_mean) cnt_up <- as.vector(cnt_month_positive) cnt_down <- as.vector(cnt_month - cnt_month_positive) probability_up <- as.vector(cnt_month_positive / cnt_month) final_monthly_return <- data.frame("月份" =month_chr, "平均涨幅" = mean_up_range, "上涨次数" = cnt_up,     "下跌次数" = cnt_down, "上涨概率" = probability_up) write.csv(final_monthly_return, "m_monthly_return.csv")
